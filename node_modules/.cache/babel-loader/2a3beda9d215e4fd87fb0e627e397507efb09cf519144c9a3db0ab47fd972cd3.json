{"ast":null,"code":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport swr from 'swr';\nimport { TwitterApiError } from './api/index.js';\n// Avoids an error when used in the pages directory where useSWR might be in `default`.\nconst useSWR = swr.default || swr;\nconst host = 'https://react-tweet.vercel.app';\nasync function fetcher(_ref) {\n  let [url, fetchOptions] = _ref;\n  const res = await fetch(url, fetchOptions);\n  const json = await res.json();\n  // We return null in case `json.data` is undefined, that way we can check for \"loading\" by\n  // checking if data is `undefined`. `null` means it was fetched.\n  if (res.ok) return json.data || null;\n  throw new TwitterApiError({\n    message: `Failed to fetch tweet at \"${url}\" with \"${res.status}\".`,\n    data: json,\n    status: res.status\n  });\n}\n/**\n * SWR hook for fetching a tweet in the browser.\n */\nexport const useTweet = (id, apiUrl, fetchOptions) => {\n  const {\n    isLoading,\n    data,\n    error\n  } = useSWR(() => apiUrl || id ? [apiUrl || id && `${host}/api/tweet/${id}`, fetchOptions] : null, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    shouldRetryOnError: false\n  });\n  return {\n    // If data is `undefined` then it might be the first render where SWR hasn't started doing\n    // any work, so we set `isLoading` to `true`.\n    isLoading: Boolean(isLoading || data === undefined && !error),\n    data,\n    error\n  };\n};\nexport const useMounted = () => {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  return mounted;\n};","map":{"version":3,"names":["useEffect","useState","swr","TwitterApiError","useSWR","default","host","fetcher","_ref","url","fetchOptions","res","fetch","json","ok","data","message","status","useTweet","id","apiUrl","isLoading","error","revalidateIfStale","revalidateOnFocus","shouldRetryOnError","Boolean","undefined","useMounted","mounted","setMounted"],"sources":["/Users/fernandoferrarazzo/Documents/nifer/portfolio/node_modules/react-tweet/dist/hooks.js"],"sourcesContent":["'use client';\nimport { useEffect, useState } from 'react';\nimport swr from 'swr';\nimport { TwitterApiError } from './api/index.js';\n// Avoids an error when used in the pages directory where useSWR might be in `default`.\nconst useSWR = swr.default || swr;\nconst host = 'https://react-tweet.vercel.app';\nasync function fetcher([url, fetchOptions]) {\n    const res = await fetch(url, fetchOptions);\n    const json = await res.json();\n    // We return null in case `json.data` is undefined, that way we can check for \"loading\" by\n    // checking if data is `undefined`. `null` means it was fetched.\n    if (res.ok) return json.data || null;\n    throw new TwitterApiError({\n        message: `Failed to fetch tweet at \"${url}\" with \"${res.status}\".`,\n        data: json,\n        status: res.status\n    });\n}\n/**\n * SWR hook for fetching a tweet in the browser.\n */ export const useTweet = (id, apiUrl, fetchOptions)=>{\n    const { isLoading, data, error } = useSWR(()=>apiUrl || id ? [\n            apiUrl || id && `${host}/api/tweet/${id}`,\n            fetchOptions\n        ] : null, fetcher, {\n        revalidateIfStale: false,\n        revalidateOnFocus: false,\n        shouldRetryOnError: false\n    });\n    return {\n        // If data is `undefined` then it might be the first render where SWR hasn't started doing\n        // any work, so we set `isLoading` to `true`.\n        isLoading: Boolean(isLoading || data === undefined && !error),\n        data,\n        error\n    };\n};\nexport const useMounted = ()=>{\n    const [mounted, setMounted] = useState(false);\n    useEffect(()=>setMounted(true), []);\n    return mounted;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,GAAG,MAAM,KAAK;AACrB,SAASC,eAAe,QAAQ,gBAAgB;AAChD;AACA,MAAMC,MAAM,GAAGF,GAAG,CAACG,OAAO,IAAIH,GAAG;AACjC,MAAMI,IAAI,GAAG,gCAAgC;AAC7C,eAAeC,OAAOA,CAAAC,IAAA,EAAsB;EAAA,IAArB,CAACC,GAAG,EAAEC,YAAY,CAAC,GAAAF,IAAA;EACtC,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,YAAY,CAAC;EAC1C,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAI,CAAC,CAAC;EAC7B;EACA;EACA,IAAIF,GAAG,CAACG,EAAE,EAAE,OAAOD,IAAI,CAACE,IAAI,IAAI,IAAI;EACpC,MAAM,IAAIZ,eAAe,CAAC;IACtBa,OAAO,EAAE,6BAA6BP,GAAG,WAAWE,GAAG,CAACM,MAAM,IAAI;IAClEF,IAAI,EAAEF,IAAI;IACVI,MAAM,EAAEN,GAAG,CAACM;EAChB,CAAC,CAAC;AACN;AACA;AACA;AACA;AAAI,OAAO,MAAMC,QAAQ,GAAGA,CAACC,EAAE,EAAEC,MAAM,EAAEV,YAAY,KAAG;EACpD,MAAM;IAAEW,SAAS;IAAEN,IAAI;IAAEO;EAAM,CAAC,GAAGlB,MAAM,CAAC,MAAIgB,MAAM,IAAID,EAAE,GAAG,CACrDC,MAAM,IAAID,EAAE,IAAI,GAAGb,IAAI,cAAca,EAAE,EAAE,EACzCT,YAAY,CACf,GAAG,IAAI,EAAEH,OAAO,EAAE;IACnBgB,iBAAiB,EAAE,KAAK;IACxBC,iBAAiB,EAAE,KAAK;IACxBC,kBAAkB,EAAE;EACxB,CAAC,CAAC;EACF,OAAO;IACH;IACA;IACAJ,SAAS,EAAEK,OAAO,CAACL,SAAS,IAAIN,IAAI,KAAKY,SAAS,IAAI,CAACL,KAAK,CAAC;IAC7DP,IAAI;IACJO;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMM,UAAU,GAAGA,CAAA,KAAI;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAC7CD,SAAS,CAAC,MAAI8B,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EACnC,OAAOD,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}