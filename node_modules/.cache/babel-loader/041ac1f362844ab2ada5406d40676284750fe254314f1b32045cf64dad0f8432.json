{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TweetContainer } from './tweet-container.js';\nimport { TweetHeader } from './tweet-header.js';\nimport { TweetInReplyTo } from './tweet-in-reply-to.js';\nimport { TweetBody } from './tweet-body.js';\nimport { TweetMedia } from './tweet-media.js';\nimport { TweetInfo } from './tweet-info.js';\nimport { TweetActions } from './tweet-actions.js';\nimport { TweetReplies } from './tweet-replies.js';\nimport { QuotedTweet } from './quoted-tweet/index.js';\nimport { enrichTweet } from '../utils.js';\nimport { useMemo } from 'react';\nexport const EmbeddedTweet = _ref => {\n  let {\n    tweet: t,\n    components\n  } = _ref;\n  var _tweet_mediaDetails;\n  // useMemo does nothing for RSC but it helps when the component is used in the client (e.g by SWR)\n  const tweet = useMemo(() => enrichTweet(t), [t]);\n  return /*#__PURE__*/_jsxs(TweetContainer, {\n    children: [/*#__PURE__*/_jsx(TweetHeader, {\n      tweet: tweet,\n      components: components\n    }), tweet.in_reply_to_status_id_str && /*#__PURE__*/_jsx(TweetInReplyTo, {\n      tweet: tweet\n    }), /*#__PURE__*/_jsx(TweetBody, {\n      tweet: tweet\n    }), ((_tweet_mediaDetails = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails.length) ? /*#__PURE__*/_jsx(TweetMedia, {\n      tweet: tweet,\n      components: components\n    }) : null, tweet.quoted_tweet && /*#__PURE__*/_jsx(QuotedTweet, {\n      tweet: tweet.quoted_tweet\n    }), /*#__PURE__*/_jsx(TweetInfo, {\n      tweet: tweet\n    }), /*#__PURE__*/_jsx(TweetActions, {\n      tweet: tweet\n    }), /*#__PURE__*/_jsx(TweetReplies, {\n      tweet: tweet\n    })]\n  });\n};","map":{"version":3,"names":["jsx","_jsx","jsxs","_jsxs","TweetContainer","TweetHeader","TweetInReplyTo","TweetBody","TweetMedia","TweetInfo","TweetActions","TweetReplies","QuotedTweet","enrichTweet","useMemo","EmbeddedTweet","_ref","tweet","t","components","_tweet_mediaDetails","children","in_reply_to_status_id_str","mediaDetails","length","quoted_tweet"],"sources":["/Users/fernandoferrarazzo/Documents/nifer/ramaportfolio/portfolio/node_modules/react-tweet/dist/twitter-theme/embedded-tweet.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TweetContainer } from './tweet-container.js';\nimport { TweetHeader } from './tweet-header.js';\nimport { TweetInReplyTo } from './tweet-in-reply-to.js';\nimport { TweetBody } from './tweet-body.js';\nimport { TweetMedia } from './tweet-media.js';\nimport { TweetInfo } from './tweet-info.js';\nimport { TweetActions } from './tweet-actions.js';\nimport { TweetReplies } from './tweet-replies.js';\nimport { QuotedTweet } from './quoted-tweet/index.js';\nimport { enrichTweet } from '../utils.js';\nimport { useMemo } from 'react';\nexport const EmbeddedTweet = ({ tweet: t, components })=>{\n    var _tweet_mediaDetails;\n    // useMemo does nothing for RSC but it helps when the component is used in the client (e.g by SWR)\n    const tweet = useMemo(()=>enrichTweet(t), [\n        t\n    ]);\n    return /*#__PURE__*/ _jsxs(TweetContainer, {\n        children: [\n            /*#__PURE__*/ _jsx(TweetHeader, {\n                tweet: tweet,\n                components: components\n            }),\n            tweet.in_reply_to_status_id_str && /*#__PURE__*/ _jsx(TweetInReplyTo, {\n                tweet: tweet\n            }),\n            /*#__PURE__*/ _jsx(TweetBody, {\n                tweet: tweet\n            }),\n            ((_tweet_mediaDetails = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails.length) ? /*#__PURE__*/ _jsx(TweetMedia, {\n                tweet: tweet,\n                components: components\n            }) : null,\n            tweet.quoted_tweet && /*#__PURE__*/ _jsx(QuotedTweet, {\n                tweet: tweet.quoted_tweet\n            }),\n            /*#__PURE__*/ _jsx(TweetInfo, {\n                tweet: tweet\n            }),\n            /*#__PURE__*/ _jsx(TweetActions, {\n                tweet: tweet\n            }),\n            /*#__PURE__*/ _jsx(TweetReplies, {\n                tweet: tweet\n            })\n        ]\n    });\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,EAAEC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AAC9D,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAO,MAAMC,aAAa,GAAGC,IAAA,IAA4B;EAAA,IAA3B;IAAEC,KAAK,EAAEC,CAAC;IAAEC;EAAW,CAAC,GAAAH,IAAA;EAClD,IAAII,mBAAmB;EACvB;EACA,MAAMH,KAAK,GAAGH,OAAO,CAAC,MAAID,WAAW,CAACK,CAAC,CAAC,EAAE,CACtCA,CAAC,CACJ,CAAC;EACF,OAAO,aAAcf,KAAK,CAACC,cAAc,EAAE;IACvCiB,QAAQ,EAAE,CACN,aAAcpB,IAAI,CAACI,WAAW,EAAE;MAC5BY,KAAK,EAAEA,KAAK;MACZE,UAAU,EAAEA;IAChB,CAAC,CAAC,EACFF,KAAK,CAACK,yBAAyB,IAAI,aAAcrB,IAAI,CAACK,cAAc,EAAE;MAClEW,KAAK,EAAEA;IACX,CAAC,CAAC,EACF,aAAchB,IAAI,CAACM,SAAS,EAAE;MAC1BU,KAAK,EAAEA;IACX,CAAC,CAAC,EACF,CAAC,CAACG,mBAAmB,GAAGH,KAAK,CAACM,YAAY,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGH,mBAAmB,CAACI,MAAM,IAAI,aAAcvB,IAAI,CAACO,UAAU,EAAE;MACxHS,KAAK,EAAEA,KAAK;MACZE,UAAU,EAAEA;IAChB,CAAC,CAAC,GAAG,IAAI,EACTF,KAAK,CAACQ,YAAY,IAAI,aAAcxB,IAAI,CAACW,WAAW,EAAE;MAClDK,KAAK,EAAEA,KAAK,CAACQ;IACjB,CAAC,CAAC,EACF,aAAcxB,IAAI,CAACQ,SAAS,EAAE;MAC1BQ,KAAK,EAAEA;IACX,CAAC,CAAC,EACF,aAAchB,IAAI,CAACS,YAAY,EAAE;MAC7BO,KAAK,EAAEA;IACX,CAAC,CAAC,EACF,aAAchB,IAAI,CAACU,YAAY,EAAE;MAC7BM,KAAK,EAAEA;IACX,CAAC,CAAC;EAEV,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}